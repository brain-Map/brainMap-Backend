name: Deploy Spring Boot Container to AWS EC2

on:
  push:
    branches: [ "dinuka-deploy" ]

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 874119032533.dkr.ecr.ap-southeast-1.amazonaws.com/brain-map-back-end-ecr           # set this to your Amazon ECR repository name
  AWS_ACCESS_KEY_ID: ${{ secrets.DINUKA_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DINUKA_AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: 874119032533
  EC2_KEY: ${{ secrets.DINUKA_EC2_KEY }}
  EC2_USER: ec2-user
  EC2_HOST: ip-172-31-24-4
  IMAGE_TAG: latest

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=latest
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            IMAGE_TAG=latest

            # Authenticate Docker on EC2
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Stop old container if exists
            docker ps -q --filter "name=brainMap" \
              | grep -q . && docker stop brainMap && docker rm -f brainMap || true

            # Pull latest image and run
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            # Ensure any existing container (running or stopped) with same name is removed
            if [ "$(docker ps -aq -f name=^brainMap$)" ]; then
              echo "Removing existing brainMap container"
              docker rm -f brainMap || true
            fi

            docker run -d --name brainMap -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
