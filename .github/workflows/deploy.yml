name: Deploy to Amazon EC2

on:
  push:
    branches: [ "dinuka-deploy" ]

env:
  AWS_REGION: ap-southeast-1 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 874119032533.dkr.ecr.ap-southeast-1.amazonaws.com/brain-map-back-end-ecr # set this to your Amazon ECR repository name
  AWS_ACCESS_KEY_ID: ${{ secrets.DINUKA_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DINUKA_AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: 874119032533
  EC2_KEY: ${{ secrets.DINUKA_EC2_KEY }}
  EC2_USER: ec2-user
  EC2_HOST: ip-172-31-24-4
  IMAGE_TAG: latest

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JAVA
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      - name: Prepare Docker build context
        run: |
          mkdir -p docker-build
          cp target/*.jar docker-build/app.jar
          cp Dockerfile docker-build/

      - name: Build and push Docker image
        working-directory: docker-build
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            # Pull latest images
            docker pull ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Stop and remove existing container
            docker ps -q --filter "name=brainMap" | grep -q . && docker stop brainMap && docker rm -f brainMap || true

            docker run -d -p 8080:8080 ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}